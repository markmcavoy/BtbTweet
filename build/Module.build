<?xml version="1.0"?>
<!-- targets to be executed, when omitted from command line default is run -->
<!--EXTERNAL_PROPERTIES: sys.env.windir-->
<project name="CV" default="BuildAndZip">
    <target name="init">
        <property name="nant.settings.currentframework" value="net-4.0" />

        <!-- This is where your packaged zips will build to from within the module folder -->
        <property name="package.dir" value="../package/" overwrite="false" />

        <property name="verbose" value="true" overwrite="false" />

        <!-- ModuleName value should be set specific to the project -->
        <property name="shortVersion" value="2.0.0"/>
        <property name="ModuleName" value="BtbTweet"  overwrite="false"  />
        <property name="subproject.name" value="${ModuleName}"/>


        <property name="debug" value="false" overwrite="false" />
        <property name="config" value="debug" if="${debug}" />
        <property name="config" value="release" unless="${debug}" />

        <sysinfo failonerror="false" />

        <if test="${verbose}">
            <echo message="debug:        ${debug}" />
            <echo message="config:       ${config}" />
        </if>

        <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
        
    </target>

	<target name="svnBuildNumber">
		<property name="build.version.revision" value="0" />
        <exec program="subwcrev" basedir="C:\Program Files\TortoiseSVN\bin" commandline='. vars64.bat dummy.txt' failonerror="false" output="mark.txt"/>
        <loadfile file="./mark.txt" property="build.version.revision"/>

        <echo message="build.version.revision:        ${build.version.revision}" />
        <!-- run some custom code to find all the files then
         update the rev number to the one we've just read from
         subversion -->
        <script language="C#">
            <references>
                <include name="System.dll" />
            </references>
            <imports>
                <import namespace="System.Text.RegularExpressions" />
            </imports>
            <code>
                <![CDATA[
              public static void ScriptMain(Project project) {
              
                  string version = Regex.Match(project.Properties["build.version.revision"], @"Last committed at revision (\d*)").Groups[1].Value;          
              
                  DirectoryInfo baseDirectory =  new DirectoryInfo(project.BaseDirectory);
                  DirectoryInfo rootDirectory = baseDirectory.Parent;
                  
                  string buildNumber = project.Properties["shortVersion"].Replace("\r\n", "");
                  string revisionBuild = version.Replace("\r\n", "");
                  StringBuilder buffer = new StringBuilder();
                  
                  var files = rootDirectory.EnumerateFiles("AssemblyInfo.cs", SearchOption.AllDirectories);
                  
                  foreach(FileInfo fi in files){
                    string fileContents;
                  
                    using(FileStream stream = fi.Open(FileMode.Open, FileAccess.ReadWrite )){
                      using(StreamReader reader = new StreamReader(stream)){
                        fileContents = reader.ReadToEnd();
                        
                        //set the assemblyVersion
                        string assemVersion = Regex.Match(fileContents, @"\[assembly: AssemblyVersion.*").Value;
                        
                        if(!string.IsNullOrEmpty(assemVersion)){
                          buffer.Append(assemVersion.Substring(0, assemVersion.IndexOf('"') + 1));
                          buffer.Append(buildNumber);
                          buffer.Append(".");
                          buffer.Append(revisionBuild);
                          buffer.Append("\")]");
                          
                          fileContents = fileContents.Replace(assemVersion, buffer.ToString());
                          buffer.Clear();
                        }
                        
                        //set the AssemblyFileVersion
                        string assemFileVersion = Regex.Match(fileContents, @"\[assembly: AssemblyFileVersion.*").Value;
                        if(!string.IsNullOrEmpty(assemFileVersion)){
                          buffer.Append(assemFileVersion.Substring(0, assemFileVersion.IndexOf('"') + 1));
                          buffer.Append(buildNumber);
                          buffer.Append(".");
                          buffer.Append(revisionBuild);
                          buffer.Append("\")]");
                          fileContents = fileContents.Replace(assemFileVersion, buffer.ToString());
                          buffer.Clear();
                        }
                      }
                    }
                    
                    using(FileStream stream = fi.Open(FileMode.Truncate, FileAccess.Write)){
                      using(StreamWriter writer = new StreamWriter(stream)){
                        writer.Write(fileContents);
                      }
                    }
                    
              }
            }
            ]]>
            </code>
        </script>
        
        <delete file="./dummy.txt" />
        <delete file="./mark.txt" />
	</target>
	

    <target name="module.build" depends="init ">
		<loadtasks assembly="C:\Program Files (x86)\nantcontrib-0.92\bin\NAnt.Contrib.Tasks.dll" />
		<msbuild project="../BtbTweet.csproj">
			<property name="Configuration" value="Release"/>
            <property name="OutputPath" value="package/temp"/>
		</msbuild>
		
		
		<copy todir="${package.dir}" flatten="false">
			<fileset basedir="${package.dir}/temp">
				<include name="BtbTweet.dll" />
			</fileset>
		</copy>
		
		<delete dir="${package.dir}/temp/" />
		
    </target>


    <!-- Begin area for creating resourcezip for installable PA zips (should depend on target that clears where this will build zip file to)-->
    <target name="createResourceZip" depends="init">
        <!-- create a flat directory to zip for install -->
        <mkdir dir="temp" unless="${directory::exists('temp')}" />

        <!-- DO NOT flatten this as we want to retain folder structure in this and ONLY this zip -->
        <copy todir="temp" flatten="false">
            <fileset basedir="../">
                <!-- Tell nant what files to grab -->
                <!-- everything included here ends up in resource.zip, this should be excluded in the CreateBinZip -->
                <include name="**.ascx" />
                <include name="**.aspx" />
                <include name="**.ashx" />
                <include name="**.resx" />
                <include name="**.htm" />
                <include name="**.css" />
                <include name="**.js" />
                <include name="**.gif" />
                <include name="**.png" />
                <include name="**.jpg" />
                <include name="**.xslt" />
                <include name="**.xsl" />
                <include name="**.config" />
                <include name="**.sql" />
				<include name="**.xml" />
				<include name="**.cshtml" />
				<include name="**.asmx" />
				
                <exclude name="bin/**.*" />
                <exclude name="Documentation/**.*" />
                <exclude name="build/**.*" />
                <exclude name="obj/**.*" />
                <exclude name="package/**.*" />
                <exclude name="doc/**.*" />
                <exclude name="node_modules/**.*" />

            </fileset>
        </copy>

        <zip zipfile="${package.dir}Resources.zip">
            <fileset basedir="temp">
                <include name="**/*" />
                <exclude name="**/*.dll" />
				<exclude name="**/.git" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />

    </target>
    <!-- End area for resourcezip creation -->



    <target name="createBinZip" depends="clean build createResourceZip">

        <copy todir="temp" flatten="false">
            <fileset>
                <include name="../*.sqldataprovider" />
                <include name="../*.dnn" />
                <include name="../eula.html" />
            </fileset>
        </copy>

        <copy todir="temp/bin" flatten="false">
            <fileset>
                <include name="${package.dir}*.dll" />
                <include name="../lib/*.dll" />
            </fileset>
        </copy>

        <copy todir="temp" flatten="true">
            <fileset>
                <include name="${package.dir}Resources.zip" />
            </fileset>
        </copy>

        <zip zipfile="${package.dir}${ModuleName}PA_${shortVersion}.zip">
            <fileset basedir="temp">
                <include name="**/*" />
            </fileset>
        </zip>

        <!--Delete temp directory -->
        <delete dir="temp" failonerror="false" />

        <delete>
            <fileset>
                <include name="${package.dir}**.dll" />
                <include name="${package.dir}Resources.zip" />
            </fileset>
        </delete>

    </target>
    <!-- End area for installable PA -->

    <target name="zipResourcesEn" depends="clean">

        <delete dir="temp" failonerror="false" />

        <copy todir="temp" flatten="false">
            <fileset basedir="../App_LocalResources">
                <include name="*.resx" />
            </fileset>
        </copy>

        <zip zipfile="${package.dir}ResxEn.zip">
            <fileset basedir="temp">
                <include name="**/*" />
            </fileset>
        </zip>

        <delete dir="temp" failonerror="false" />
    </target>


    <!--  SYNTHETIC TASKS  -->
    <target name="build" depends="clean module.build" description="This target compiles the application." />

    <target name="package" depends="createBinZip" description="This target compiles the application." />

    <target name="zipresources" depends="zipResourcesEn" description="Creates a zip file of all EN resource files, this can be used with online server to convert to other languages"/>

    <target name="clean" depends="init" description="Delete all previously compiled binaries.">
        <delete>
            <fileset>
                <!-- clean the output folder -->
                <include name="${package.dir}**.*" />

            </fileset>
        </delete>
    </target>


</project>